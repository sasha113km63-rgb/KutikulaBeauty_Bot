import aiohttp
import logging
from config import (
    YCLIENTS_COMPANY_ID,
    YCLIENTS_PARTNER_TOKEN,
    YCLIENTS_LOGIN,
    YCLIENTS_PASSWORD,
)

logger = logging.getLogger("yclients_api")

BASE_URL = "https://api.yclients.com/api/v1"
user_token = None  # –ö—ç—à –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def get_headers():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è YCLIENTS.
    """
    global user_token
    if not user_token:
        user_token = await get_user_token()

    headers = {
        "Accept": "application/vnd.yclients.v2+json",
        "Content-Type": "application/json",
        "Authorization": f"Bearer {YCLIENTS_PARTNER_TOKEN}",
        "User-Auth-Token": user_token or "",
    }
    return headers


async def get_user_token():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ user_token –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
    """
    logger.info(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ YCLIENTS —Å –ª–æ–≥–∏–Ω–æ–º: {YCLIENTS_LOGIN}")
    url = f"{BASE_URL}/auth"
    data = {"login": YCLIENTS_LOGIN, "password": YCLIENTS_PASSWORD}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data) as resp:
            result = await resp.json()
            if resp.status == 200 and result.get("data"):
                token = result["data"]["user_token"]
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π user_token: {token[:6]}...")
                return token
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result}")
                return None


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥ ---
async def get_categories():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    url = f"{BASE_URL}/company/{YCLIENTS_COMPANY_ID}/service_categories"
    headers = await get_headers()

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            data = await resp.json()
            if data.get("success"):
                return data["data"]
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {data}")
            return []


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
async def get_services_by_category(category_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    url = f"{BASE_URL}/company/{YCLIENTS_COMPANY_ID}/services"
    headers = await get_headers()

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            data = await resp.json()
            if not data.get("success"):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: {data}")
                return []

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            services = [s for s in data["data"] if s["category_id"] == category_id]
            return services


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤ ---
async def get_masters_for_service(service_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É.
    """
    url = f"{BASE_URL}/company/{YCLIENTS_COMPANY_ID}/staff"
    headers = await get_headers()

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            data = await resp.json()
            if not data.get("success"):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤: {data}")
                return []

            masters = [m for m in data["data"] if service_id in m.get("services", [])]
            return masters


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ---
async def get_free_times(staff_id, service_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.
    """
    url = f"{BASE_URL}/book_times/{YCLIENTS_COMPANY_ID}/{staff_id}/{service_id}"
    headers = await get_headers()

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            data = await resp.json()
            if not data.get("success"):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {data}")
                return []

            times = []
            for day in data["data"]:
                for time in day["times"]:
                    times.append(f"{day['date']} {time}")
            return times


# --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ---
async def create_client(name, last_name, phone):
    """
    –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç).
    """
    url = f"{BASE_URL}/company/{YCLIENTS_COMPANY_ID}/clients"
    headers = await get_headers()
    payload = {"name": f"{name} {last_name}", "phone": phone}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            data = await resp.json()
            if data.get("success"):
                logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω: {phone}")
                return data["data"]
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {data}")
                return None


# --- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
async def create_booking(name, last_name, phone, service_id, master_id, time):
    """
    –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞.
    """
    client = await create_client(name, last_name, phone)
    if not client:
        return None

    url = f"{BASE_URL}/book_record/{YCLIENTS_COMPANY_ID}"
    headers = await get_headers()
    payload = {
        "staff_id": master_id,
        "services": [{"id": service_id}],
        "client": {
            "id": client["id"],
            "name": client["name"],
            "phone": client["phone"],
        },
        "datetime": time,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            data = await resp.json()
            if data.get("success"):
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {data['data']['id']}")
                return data["data"]
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {data}")
                return None
