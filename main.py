import logging
import aiohttp
import asyncio
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from config import TELEGRAM_TOKEN
from yclients_api import (
    get_categories,
    get_services_by_category,
    get_masters_for_service,
    get_free_times,
    create_booking,
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("main")

# --- Telegram API ---
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# --- FastAPI ---
app = FastAPI()


async def send_message(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API"""
    async with aiohttp.ClientSession() as session:
        await session.post(f"{TELEGRAM_API_URL}/sendMessage", json={"chat_id": chat_id, "text": text})


@app.get("/")
async def root():
    return {"status": "ok", "message": "Kutikula bot is running"}


@app.post("/telegram-webhook")
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
    update = await request.json()
    logger.info(f"üì© Incoming update: {update}")

    message = update.get("message")
    if not message:
        return JSONResponse(content={"ok": True})

    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip().lower()

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ---
    greetings = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "hi", "hello", "/start"]
    if any(word in text for word in greetings):
        reply = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üå∏\n"
            "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *beauty studio KUTIKULA* üíÖ\n\n"
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
            "‚ñ´ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
            "‚ñ´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏\n"
            "‚ñ´ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤"
        )
        await send_message(chat_id, reply)

        # –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = await get_categories()
        if not categories:
            await send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.")
        else:
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:\n\n"
            for c in categories:
                msg += f"‚Ä¢ {c['title']}\n"
            await send_message(chat_id, msg)

        return JSONResponse(content={"ok": True})

   @app.post("/telegram-webhook")
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
    update = await request.json()
    logger.info(f"üì© Incoming update: {update}")

    message = update.get("message")
    if not message:
        return JSONResponse(content={"ok": True})

    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip().lower()

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ---
    greetings = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "hi", "hello", "/start"]
    if any(word in text for word in greetings):
        reply = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üå∏\n"
            "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *beauty studio KUTIKULA* üíÖ\n\n"
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
            "‚ñ´ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
            "‚ñ´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏\n"
            "‚ñ´ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤"
        )
        await send_message(chat_id, reply)

        # –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = await get_categories()
        if not categories:
            await send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.")
        else:
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:\n\n"
            for c in categories:
                msg += f"‚Ä¢ {c['title']}\n"
            await send_message(chat_id, msg)

        return JSONResponse(content={"ok": True})

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    categories = await get_categories()
    if categories:
        selected = next((c for c in categories if c["title"].lower() == text), None)
        if selected:
            await send_message(chat_id, f"üìã –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {selected['title']}\n–ó–∞–≥—Ä—É–∂–∞—é —É—Å–ª—É–≥–∏...")

            services = await get_services_by_category(selected["id"])
            if not services:
                await send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            else:
                msg = f"üíÖ *–£—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {selected['title']}:*\n\n"
                for s in services:
                    price = s.get("price_min") or s.get("price") or 0
                    msg += f"‚Ä¢ {s['title']} ‚Äî {price} ‚ÇΩ\n"
                await send_message(chat_id, msg)
            return JSONResponse(content={"ok": True})

    # --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    await send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞ üòÖ. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–∏–≤–µ—Ç¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    return JSONResponse(content={"ok": True})
