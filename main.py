import os
import json
import logging
from fastapi import FastAPI, Request
import httpx
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("kutikula_bot")

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YCLIENTS_PARTNER_TOKEN = os.getenv("YCLIENTS_PARTNER_TOKEN")
YCLIENTS_LOGIN = os.getenv("YCLIENTS_LOGIN")
YCLIENTS_PASSWORD = os.getenv("YCLIENTS_PASSWORD")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è YCLIENTS ---
YCLIENTS_USER_TOKEN = None


# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ YCLIENTS ---
def yclients_auth():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ YCLIENTS –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ user_token"""
    global YCLIENTS_USER_TOKEN
    try:
        url = "https://api.yclients.com/api/v1/auth"
        headers = {
            "Accept": "application/vnd.yclients.v2+json",
            "Content-Type": "application/json",
            "Authorization": f"Bearer {YCLIENTS_PARTNER_TOKEN}"
        }
        payload = {"login": YCLIENTS_LOGIN, "password": YCLIENTS_PASSWORD}

        response = requests.post(url, json=payload, headers=headers)
        data = response.json()

        if data.get("success"):
            YCLIENTS_USER_TOKEN = data["data"]["user_token"]
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è YCLIENTS —É—Å–ø–µ—à–Ω–∞")
            return YCLIENTS_USER_TOKEN
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ YCLIENTS: {data}")
            return None
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ YCLIENTS")
        return None


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ ---
async def try_yclients_get_services():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        company_id = 530777  # ID –∫–æ–º–ø–∞–Ω–∏–∏ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!)
        url = f"https://api.yclients.com/api/v1/company/{company_id}/services"

        headers = {
            "Accept": "application/vnd.yclients.v2+json",
            "Content-Type": "application/json",
            "Authorization": f"Bearer {YCLIENTS_PARTNER_TOKEN}, User {YCLIENTS_USER_TOKEN}"
        }

        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            data = response.json()

        if data.get("success"):
            services = [srv["title"] for srv in data.get("data", [])]
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(services)} —É—Å–ª—É–≥")
            return "\n".join(services) if services else "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç."
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥: {data}")
            return f"–û—à–∏–±–∫–∞ YCLIENTS: {data.get('meta', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É—Å–ª—É–≥")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥."


# --- Telegram: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def send_message(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    async with httpx.AsyncClient() as client:
        await client.post(url, json=payload)


@app.post("/telegram-webhook")
async def telegram_webhook(request: Request):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram"""
    update = await request.json()
    logger.info(f"üì© Incoming Telegram update: {json.dumps(update, ensure_ascii=False)}")

    if "message" not in update:
        return {"ok": True}

    message = update["message"]
    chat_id = message["chat"]["id"]
    text = message.get("text", "")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if text == "/start":
        await send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ YCLIENTS üíÖ\n\n"
                                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                    "‚Ä¢ /services ‚Äî —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥\n"
                                    "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å")
    elif text == "/services":
        services_text = await try_yclients_get_services()
        await send_message(chat_id, f"üìã –£—Å–ª—É–≥–∏:\n{services_text}")
    elif text == "/help":
        await send_message(chat_id, "–ö–æ–º–∞–Ω–¥—ã:\n"
                                    "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
                                    "/services ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥\n"
                                    "/help ‚Äî –ø–æ–º–æ—â—å")
    else:
        await send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª üòÖ. –í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

    return {"ok": True}


@app.get("/")
async def home():
    return {"status": "ok", "message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}


# --- –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
YCLIENTS_USER_TOKEN = yclients_auth()
if not YCLIENTS_USER_TOKEN:
    logger.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ YCLIENTS. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
else:
    logger.info("üîê user_token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
