import os
import telebot
import httpx
from dotenv import load_dotenv
from fastapi import FastAPI, Request

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# Telegram —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# YCLIENTS –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
YCLIENTS_API_BASE = os.getenv("YCLIENTS_API_BASE", "https://api.yclients.com/api/v1")
YCLIENTS_COMPANY_ID = os.getenv("YCLIENTS_COMPANY_ID")
YCLIENTS_PARTNER_TOKEN = os.getenv("YCLIENTS_PARTNER_TOKEN")
YCLIENTS_USER_LOGIN = os.getenv("YCLIENTS_USER_LOGIN")
YCLIENTS_USER_PASSWORD = os.getenv("YCLIENTS_USER_PASSWORD")

app = FastAPI()

# ---------------------- YCLIENTS AUTH ----------------------
async def get_user_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å, –±–µ–∑ —Å–º—Å)"""
    url = f"{YCLIENTS_API}/auth"
    headers = {"Accept": "application/json", "Content-Type": "application/json"}
    payload = {
        "login": YCLIENTS_USER_LOGIN,
        "password": YCLIENTS_USER_PASSWORD,
        "partner_token": YCLIENTS_PARTNER_TOKEN
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload, headers=headers)
        data = response.json()
        if "data" in data and "user_token" in data["data"]:
            return data["data"]["user_token"]
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", data)
            return None


# ---------------------- TELEGRAM HANDLERS ----------------------
@bot.message_handler(commands=["start"])
def start(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ –≤ YCLIENTS.\n"
                          "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "/services ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏\n"
                          "/bookings ‚Äî –º–æ–∏ –∑–∞–ø–∏—Å–∏")


@bot.message_handler(commands=["services"])
async def services(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥"""
    user_token = await get_user_token()
    if not user_token:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ YCLIENTS üòî")
        return

    headers = {
        "Accept": "application/json",
        "Authorization": f"Bearer {YCLIENTS_PARTNER_TOKEN}, User {user_token}"
    }

    url = f"{YCLIENTS_API}/company/{YCLIENTS_COMPANY_ID}/services"
    async with httpx.AsyncClient() as client:
        r = await client.get(url, headers=headers)
        data = r.json()

    if not data.get("success"):
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {data.get('meta', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        return

    services = data.get("data", [])
    if not services:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç.")
        return

    text = "üíÖ –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n"
    for s in services:
        text += f"‚Ä¢ {s['title']} ‚Äî –æ—Ç {s['price_min']}‚ÇΩ –¥–æ {s['price_max']}‚ÇΩ\n"
    bot.reply_to(message, text)


@bot.message_handler(commands=["bookings"])
async def bookings(message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_token = await get_user_token()
    if not user_token:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ üòî")
        return

    headers = {
        "Accept": "application/json",
        "Authorization": f"Bearer {YCLIENTS_PARTNER_TOKEN}, User {user_token}"
    }

    url = f"{YCLIENTS_API}/records/{YCLIENTS_COMPANY_ID}"
    async with httpx.AsyncClient() as client:
        r = await client.get(url, headers=headers)
        data = r.json()

    if not data.get("success"):
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.")
        return

    records = data.get("data", [])
    if not records:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    text = "üìÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for rec in records:
        text += f"‚Äî {rec['services'][0]['title']} ({rec['date']})\n"
    bot.reply_to(message, text)


# ---------------------- WEBHOOK (–¥–ª—è Render) ----------------------
@app.post("/telegram-webhook")
async def telegram_webhook(request: Request):
    json_str = await request.body()
    update = telebot.types.Update.de_json(json_str.decode("utf-8"))
    bot.process_new_updates([update])
    return {"ok": True}


@app.get("/")
def home():
    return {"status": "ok"}
