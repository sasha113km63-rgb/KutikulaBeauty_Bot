
import os
import json
from fastapi import FastAPI, Request, BackgroundTasks
import httpx
from typing import Optional

# –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:
# –¢–æ–∫–µ–Ω—ã –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render env vars).

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
YCLIENTS_USER_TOKEN = os.environ.get("YCLIENTS_USER_TOKEN")
YCLIENTS_COMPANY_ID = os.environ.get("YCLIENTS_COMPANY_ID")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")  # Telegram chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BASE_URL = os.environ.get("BASE_URL")  # https://your-service.onrender.com
YCLIENTS_API_BASE = os.environ.get("YCLIENTS_API_BASE", "https://api.yclients.com")

app = FastAPI(title="KUTIKULA Bot")

async def send_telegram_message(chat_id: int, text: str, parse_mode: Optional[str] = "HTML"):
    if not TELEGRAM_TOKEN:
        print("TELEGRAM_TOKEN not set")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": parse_mode}
    async with httpx.AsyncClient() as client:
        r = await client.post(url, json=payload, timeout=15.0)
        try:
            r.raise_for_status()
        except Exception:
            print("Failed to send telegram message:", r.text)

@app.on_event("startup")
async def startup_event():
    if TELEGRAM_TOKEN and BASE_URL:
        webhook_url = f"{BASE_URL.rstrip('/')}/telegram-webhook"
        set_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
        async with httpx.AsyncClient() as client:
            r = await client.post(set_url, json={"url": webhook_url})
            print("setWebhook response:", r.text)

@app.post("/telegram-webhook")
async def telegram_webhook(request: Request, background_tasks: BackgroundTasks):
    data = await request.json()
    message = data.get("message") or data.get("edited_message")
    if not message:
        return {"ok": True}
    chat_id = message["chat"]["id"]
    text = message.get("text","").strip()
    if text.startswith("/start"):
        reply = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç—É–¥–∏–∏ KUTIKULA.\n\n"
            "–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É, –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –∫ –º–∞—Å—Ç–µ—Ä—É –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ü–µ–Ω–∞–º –∏ –≥—Ä–∞—Ñ–∏–∫—É.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å üíÖ\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/services - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏\n"
            "/book - –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å\n"
        )
        background_tasks.add_task(send_telegram_message, chat_id, reply)
        return {"ok": True}

    if text.startswith("/services"):
        services_text = (
            "–ù–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏:\n\n"
            "üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏: —Å—Ç—Ä–∏–∂–∫–∏, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, —É—Ö–æ–¥\n"
            "üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å: –º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä, –ø–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫–æ–º\n"
            "‚ú® –õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è: –∑–æ–Ω—ã –ª–∏—Ü–∞, —Ä—É–∫, –Ω–æ–≥, —Ç–µ–ª–∞\n\n"
            "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /book\n"
        )
        background_tasks.add_task(send_telegram_message, chat_id, services_text)
        return {"ok": True}

    if text.startswith("/book"):
        prompt = (
            "–•–æ—Ä–æ—à–æ. –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å–ª—É–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–º–∞–Ω–∏–∫—é—Ä' –∏–ª–∏ '–ª–∞–∑–µ—Ä —ç–ø–∏–ª—è—Ü–∏—è –Ω–æ–≥–∏'),\n"
            "–¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:00), –∞ —Ç–∞–∫–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
            "–ü—Ä–∏–º–µ—Ä: –º–∞–Ω–∏–∫—é—Ä, 25.11.2025, 15:00, –ê–Ω–Ω–∞, +79161234567"
        )
        background_tasks.add_task(send_telegram_message, chat_id, prompt)
        return {"ok": True}

    parts = [p.strip() for p in text.split(",")]
    if len(parts) >= 4:
        service_name = parts[0]
        date_str = parts[1]
        time_str = parts[2]
        client_name = parts[3]
        client_phone = parts[4] if len(parts) >=5 else ""
        success, resp = await create_yclients_booking(service_name, date_str, time_str, client_name, client_phone)
        if success:
            reply = f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {service_name}, {date_str} {time_str}.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ üå∏"
            background_tasks.add_task(send_telegram_message, chat_id, reply)
            if ADMIN_CHAT_ID:
                admin_text = f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:\n{service_name}\n{date_str} {time_str}\n{client_name}\n{client_phone}\n\n–û—Ç–≤–µ—Ç YCLIENTS:\n<pre>{json.dumps(resp, ensure_ascii=False, indent=2)}</pre>"
                background_tasks.add_task(send_telegram_message, ADMIN_CHAT_ID, admin_text, "HTML")
        else:
            reply = "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            background_tasks.add_task(send_telegram_message, chat_id, reply)
        return {"ok": True}

    background_tasks.add_task(send_telegram_message, chat_id, "–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É ‚ú®")
    return {"ok": True}

async def create_yclients_booking(service_name: str, date_str: str, time_str: str, client_name: str, client_phone: str):
    if not (YCLIENTS_USER_TOKEN and YCLIENTS_COMPANY_ID):
        return False, {"error": "YCLIENTS credentials not set"}

    url = f"{YCLIENTS_API_BASE}/api/v1/companies/{YCLIENTS_COMPANY_ID}/bookings"

    payload = {
        "client": {
            "name": client_name,
            "phone": client_phone
        },
        "service": {
            "name": service_name
        },
        "datetime": f"{date_str} {time_str}"
    }

    headers = {"Authorization": f"Bearer {YCLIENTS_USER_TOKEN}", "Content-Type": "application/json"}
    async with httpx.AsyncClient() as client:
        try:
            r = await client.post(url, headers=headers, json=payload, timeout=15.0)
            content = r.json()
            if r.status_code in (200,201):
                return True, content
            else:
                print("YCLIENTS booking failed:", r.status_code, r.text)
                return False, {"status": r.status_code, "text": r.text, "json": content}
        except Exception as e:
            print("YCLIENTS request exception:", str(e))
            return False, {"exception": str(e)}

@app.post("/yclients-webhook")
async def yclients_webhook(request: Request, background_tasks: BackgroundTasks):
    payload = await request.json()
    pretty = json.dumps(payload, ensure_ascii=False, indent=2)
    text = f"üì£ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ YCLIENTS:\n<pre>{pretty}</pre>"
    if ADMIN_CHAT_ID:
        background_tasks.add_task(send_telegram_message, ADMIN_CHAT_ID, text, "HTML")
    return {"status": "ok"}
